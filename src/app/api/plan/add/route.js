// app/api/plan/add/route.js
import { NextResponse } from "next/server";
import Plan from "../../../../../models/Plan";
import User from "../../../../../models/User";
import { connectDB } from "../../../../../lib/mongodb";

export async function POST(req) {
  await connectDB();
  const body = await req.json();

  try {
    const user = await User.findOne({ id_name: body.userid_name });

    if (!user) {
      return NextResponse.json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 404 });
    }

    // üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ Id_title ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡∏û‡∏£‡πâ‡∏≠‡∏° retry
    const today = new Date();
    const datePart = today.toISOString().slice(2, 10).replace(/-/g, ""); // ‡πÄ‡∏ä‡πà‡∏ô "250618"
    const prefix = `PLN${datePart}`;
    let retries = 3;
    let newPlan;

    while (retries > 0) {
      try {
        // üîç ‡∏´‡∏≤ Id_title ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
        const latestPlan = await Plan.findOne({
          Id_title: { $regex: `^${prefix}` },
        }).sort({ Id_title: -1 }).lean();

        let runningNumber = "001";
        if (latestPlan) {
          const lastNumber = parseInt(latestPlan.Id_title.slice(-3));
          runningNumber = String(lastNumber + 1).padStart(3, "0");
        }

        const Id_title = `${prefix}${runningNumber}`;

        newPlan = await Plan.create({
          Id_title,
          title: body.title,
          date: body.date,
          id_name: user.id_name,
        });

        break; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
      } catch (err) {
        if (err.code === 11000) {
          retries--; // ‡∏ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ã‡πâ‡∏≥ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        } else {
          throw err; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ catch ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        }
      }
    }

    if (!newPlan) {
      return NextResponse.json({ success: false, error: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á" }, { status: 500 });
    }

    return NextResponse.json({ success: true, data: newPlan });

  } catch (error) {
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}
